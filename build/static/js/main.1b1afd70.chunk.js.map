{"version":3,"sources":["serviceWorker.ts","firebase.ts","components/addRecipe/detailsSection/MealPicker.tsx","components/addRecipe/detailsSection/NumberInput.tsx","components/addRecipe/detailsSection/TextInput.tsx","components/addRecipe/detailsSection/details/Details.tsx","components/addRecipe/ingredientList/IngredientList.tsx","components/addRecipe/addRecipe/AddRecipe.tsx","components/ErrorBoundary.tsx","components/root/Root.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","firebase","initializeApp","apiKey","appId","authDomain","databaseURL","messagingSenderId","projectId","storageBucket","mealTypes","MealPicker","value","onChange","TextField","select","label","id","variant","e","currentTarget","map","option","MenuItem","key","NumberInput","isRequired","required","type","TextInput","isFullWidth","style","fullWidth","Details","gridItemStyle","display","justifyContent","timeStyle","margin","this","props","handleChange","meal","recipeTime","recipeTitle","servings","Grid","container","spacing","direction","alignItems","justify","item","xs","Component","ingredientStyles","width","Ingredient","className","defaultValue","text","name","index","toString","onBlur","Ingredients","splitIngredients","ingredients","split","filter","String","state","indexedIngredients","numIngredients","buildIngredients","bind","newIngredient","Button","onClick","setState","ingredientsText","i","push","parseInt","joinedList","join","updateIngredients","AddRecipe","content","handleSubmit","onSubmit","config","readonly","tabIndex","newContent","event","preventDefault","recipesRef","database","ref","recipe","time","title","ErrorBoundary","error","info","componentStack","whiteSpace","children","React","myTheme","createMuiTheme","palette","primary","contrastText","dark","light","main","secondary","Root","ThemeProvider","theme","Container","maxWidth","path","component","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1b1afd70.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register (config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                        );\n                    });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW (swUrl: string, config?: Config) {\n    navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n        registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            if (installingWorker == null) {\n                return;\n            }\n            installingWorker.onstatechange = () => {\n                if (installingWorker.state === 'installed') {\n                    if (navigator.serviceWorker.controller) {\n                        // At this point, the updated precached content has been fetched,\n                        // but the previous service worker will still serve the older\n                        // content until all client tabs are closed.\n                        console.log(\n                            'New content is available and will be used when all ' +\n                            'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                        if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                    } else {\n                        // At this point, everything has been precached.\n                        // It's the perfect time to display a\n                        // \"Content is cached for offline use.\" message.\n                        console.log('Content is cached for offline use.');\n\n                        // Execute callback\n                        if (config && config.onSuccess) {\n                            config.onSuccess(registration);\n                        }\n                    }\n                }\n            };\n        };\n    })\n    .catch(error => {\n        console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker (swUrl: string, config?: Config) {\n    const errorStatusCode = 404;\n\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n    .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n            response.status === errorStatusCode ||\n            (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n            // No service worker found. Probably a different app. Reload the page.\n            navigator.serviceWorker.ready.then(registration => {\n                registration.unregister().then(() => {\n                    window.location.reload();\n                });\n            });\n        } else {\n            // Service worker found. Proceed as normal.\n            registerValidSW(swUrl, config);\n        }\n    })\n    .catch(() => {\n        console.log(\n            'No internet connection found. App is running in offline mode.',\n        );\n    });\n}\n\nexport function unregister () {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import firebase from 'firebase';\n\nconst config = {\n    apiKey: 'AIzaSyBIoEUAm5_g6WVFunpfEC6eRaXFfPCajz4',\n    appId: '1:819948432892:web:f11acfbb98da6fa38b9679',\n    authDomain: 'recipe-collection-b50d5.firebaseapp.com',\n    databaseURL: 'https://recipe-collection-b50d5.firebaseio.com',\n    messagingSenderId: '819948432892',\n    projectId: 'recipe-collection-b50d5',\n    storageBucket: 'recipe-collection-b50d5.appspot.com',\n  };\n\nfirebase.initializeApp(config);\nexport default firebase;\n","import { MenuItem, TextField } from '@material-ui/core';\nimport React from 'react';\n\nconst mealTypes = [\n    'Appetizer',\n    'Breakfast',\n    'Dessert',\n    'Dinner',\n    'Drink',\n    'Side',\n    'Snack',\n    'Other',\n];\n\ntype Props = {\n    value: string;\n    onChange: (id: string, value: string) => void;\n};\n\nconst MealPicker = ({ value, onChange }: Props) => (\n    <TextField\n        select\n        label='Meal'\n        id='mealPicker'\n        variant='outlined'\n        value={value}\n        onChange={e => onChange('meal', mealTypes[+e.currentTarget.value])}\n    >\n        {mealTypes.map(option => (\n            <MenuItem key={option} value={option}>\n                {option}\n            </MenuItem>\n        ))}\n    </TextField>\n);\n\nexport default MealPicker;\n","import { TextField } from '@material-ui/core';\nimport React from 'react';\n\ntype Props = {\n    label: string;\n    isRequired: boolean;\n    id: string;\n    value: number|null;\n    onChange: (id: string, value: number) => void;\n};\n\nconst NumberInput = ({ label, isRequired, id, onChange, value }: Props) => (\n    <TextField\n        required = {isRequired}\n        type='number'\n        label={label}\n        variant='outlined'\n        id={id}\n        value={value}\n        onChange={e => onChange(id, +e.currentTarget.value)}\n    />\n);\n\nexport default NumberInput;\n","import { TextField } from '@material-ui/core';\nimport React from 'react';\n\ntype Props = {\n    label: string;\n    isFullWidth: boolean;\n    isRequired: boolean;\n    id: string;\n    value: string;\n    style: {};\n    onChange: (id: string, value: string) => void;\n};\n\nconst TextInput = ({ label, isFullWidth, isRequired, id, onChange, value, style }: Props) => (\n    <TextField\n        fullWidth={isFullWidth}\n        required={isRequired}\n        label={label}\n        variant='outlined'\n        id={id}\n        value={value}\n        onChange={e => onChange(id, e.currentTarget.value)}\n        style={style}\n    />\n);\n\nexport default TextInput;\n","import { Grid } from '@material-ui/core';\nimport { Component } from 'react';\nimport React from 'react';\nimport MealPicker from '../MealPicker';\nimport NumberInput from '../NumberInput';\nimport TextInput from '../TextInput';\nimport './details.scss';\n\ninterface Props {\n    handleChange: (id: string, value: string|number) => void;\n    meal: string;\n    recipeTime: string;\n    recipeTitle: string;\n    servings: number;\n}\n\nexport default class Details extends Component<Props, {}> {\n    private readonly gridItemStyle = {\n        display: 'flex',\n        justifyContent: 'flex-end',\n    };\n\n    private readonly timeStyle = {\n        margin: '0 10px',\n    };\n\n    public render () {\n        const { handleChange, meal, recipeTime, recipeTitle, servings } = this.props;\n\n        return (\n            <Grid\n                container\n                spacing={3}\n                direction='row'\n                alignItems='flex-start'\n                justify='flex-end'\n                id='test-grid'\n            >\n                <Grid item xs={12}>\n                    <TextInput\n                        label='Recipe Title'\n                        isFullWidth={true}\n                        isRequired={true}\n                        id='recipeTitle'\n                        value={recipeTitle}\n                        onChange={handleChange}\n                        style={{}}\n                    />\n                </Grid>\n                <Grid item xs={12} style={this.gridItemStyle}>\n                    <MealPicker\n                        value={meal}\n                        onChange={handleChange}\n                    />\n                    <TextInput\n                        label='Time'\n                        isFullWidth={false}\n                        isRequired={false}\n                        id='recipeTime'\n                        value={recipeTime}\n                        onChange={handleChange}\n                        style={this.timeStyle}\n                    />\n                    <NumberInput\n                        label='Servings'\n                        isRequired={false}\n                        id='servings'\n                        value={servings}\n                        onChange={handleChange}\n                    />\n                </Grid>\n            </Grid>\n        );\n    }\n}\n","import { Button, Grid, TextField } from '@material-ui/core';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport KeyboardArrowRightOutlinedIcon from '@material-ui/icons/KeyboardArrowRightOutlined';\nimport React, { Component } from 'react';\nimport './ingredientList.scss';\n\ninterface IngredientProps {\n    index: number;\n    text: string;\n    onBlur: ((e: React.FocusEvent<HTMLInputElement>) => void);\n}\n\nconst ingredientStyles = {\n    width: '100%',\n};\n\nfunction Ingredient (props: IngredientProps) {\n    return (\n        <div className='ingredient'>\n            <Grid container spacing={1} alignItems='flex-end'>\n                <Grid item xs={1}>\n                    <KeyboardArrowRightOutlinedIcon />\n                </Grid>\n                <Grid item xs={11}>\n                    <TextField\n                        id='input-with-icon-grid'\n                        defaultValue={props.text}\n                        name={props.index.toString()}\n                        onBlur={props.onBlur}\n                        style={ingredientStyles}\n                    />\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n\ninterface IngredientsProps {\n    ingredients: string;\n    updateIngredients: (ingredients: string) => void;\n}\n\ninterface IngredientsState {\n    indexedIngredients: string[];\n    numIngredients: number;\n}\n\nexport default class Ingredients extends Component<IngredientsProps, IngredientsState> {\n    constructor (props: IngredientsProps) {\n        super(props);\n        const splitIngredients = props.ingredients.split('\\n').filter(String);\n        this.state = {\n            indexedIngredients: splitIngredients,\n            numIngredients: 1,\n        };\n\n        this.buildIngredients = this.buildIngredients.bind(this);\n        this.newIngredient = this.newIngredient.bind(this);\n    }\n\n    public render () {\n        return (\n            <div id='ingredients-list'>\n                <h2>INGREDIENTS</h2>\n                {this.buildIngredients(this.state.indexedIngredients)}\n                <div id='button-container'>\n                    <Button onClick={e => this.setState({ numIngredients: this.state.numIngredients + 1 })}>\n                        <Grid container spacing={1}>\n                            <Grid item>\n                                <AddCircleIcon />\n                            </Grid>\n                            <Grid item>\n                                Add Ingredient\n                            </Grid>\n                        </Grid>\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n\n    private buildIngredients (ingredientsText: string[]) {\n        const ingredients = [];\n        for (let i = 0; i < this.state.numIngredients; i++) {\n\n            ingredients.push(\n                <Ingredient key={i.toString()} index={i} text={ingredientsText[i]} onBlur={this.newIngredient} />,\n            );\n        }\n        return ingredients;\n    }\n\n    private newIngredient (e: React.FocusEvent<HTMLInputElement>) {\n        const { indexedIngredients } = this.state;\n\n        indexedIngredients[parseInt(e.currentTarget.name, 10)] = e.currentTarget.value;\n        const joinedList = indexedIngredients.join('\\n');\n        this.props.updateIngredients(joinedList);\n    }\n}\n","import { Button, Grid } from '@material-ui/core';\nimport JoditEditor from 'jodit-react';\nimport { Component } from 'react';\nimport React from 'react';\nimport firebase from '../../../firebase';\nimport Details from '../detailsSection/details/Details';\nimport Ingredients from '../ingredientList/IngredientList';\nimport './addRecipe.scss';\n\ninterface State {\n    ingredients: string;\n    meal: string;\n    recipeTitle: string;\n    servings: number;\n    recipeTime: string;\n    content: string;\n}\n\nexport default class AddRecipe extends Component<{}, State> {\n    constructor (props: {}) {\n        super(props);\n        this.state = {\n            content: '',\n            ingredients: '',\n            meal: '',\n            recipeTime: '',\n            recipeTitle: '',\n            servings: 0,\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    public render () {\n        return (\n            <Grid\n                container\n                direction='column'\n                justify='flex-start'\n                alignItems='center'\n            >\n                <Grid item>\n                    <header>\n                        <h1>Add Recipe</h1>\n                    </header>\n                </Grid>\n                <form onSubmit={this.handleSubmit}>\n                    <Grid item>\n                        <Details\n                            handleChange={this.handleChange}\n                            meal={this.state.meal}\n                            recipeTime={this.state.recipeTime}\n                            recipeTitle={this.state.recipeTitle}\n                            servings={this.state.servings}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <Ingredients\n                            ingredients={this.state.ingredients}\n                            updateIngredients={ingredients => this.setState({ingredients})}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <h2>RECIPE</h2>\n                        {/* Documentation: https://xdsoft.net/jodit/doc/ */}\n                        <JoditEditor\n                            value={this.state.content}\n                            config={{readonly: false, tabIndex: 0}}\n                            onBlur={newContent => this.setState({ content: newContent })}\n                        />\n                    </Grid>\n                    <Grid item id='submit-grid'>\n                        <Button\n                            type='submit'\n                            variant='outlined'\n                        >\n                            Submit\n                        </Button>\n                    </Grid>\n                </form>\n            </Grid>\n        );\n    }\n\n    public handleChange (key: string, value: string|number) {\n        this.setState({\n            [key]: value,\n        } as Pick<State, keyof State>);\n    }\n\n    public handleSubmit (event: React.FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n        const recipesRef = firebase.database().ref('recipes');\n        const recipe = {\n            ingredients: this.state.ingredients,\n            meal: this.state.meal,\n            servings: this.state.servings,\n            time: this.state.recipeTime,\n            title: this.state.recipeTitle,\n        };\n        recipesRef.push(recipe);\n        this.setState({\n            ingredients: '',\n            meal: '',\n            recipeTime: '',\n            recipeTitle: '',\n            servings: 0,\n        });\n    }\n}\n","import React, { ErrorInfo } from 'react';\n\nexport class ErrorBoundary extends React.Component<{}, { error: Error | boolean, info: ErrorInfo }> {\n    constructor (props: any) {\n        super(props);\n        this.state = {\n            error: false,\n            info: { componentStack: '' },\n        };\n    }\n\n    public componentDidCatch (error: Error, info: ErrorInfo) {\n        this.setState({\n            error,\n            info,\n        });\n    }\n\n    public render () {\n        if (this.state.error) {\n            return(\n                <div>\n                    <h5>We've encountered an error!</h5>\n                    <details style={{ whiteSpace: 'pre-wrap' }}>\n                        {this.state.info.componentStack}\n                    </details>\n                </div>\n            );\n        }\n\n        return this.props.children;\n    }\n}\n","import { Container, createMuiTheme, ThemeProvider } from '@material-ui/core';\nimport React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport AddRecipe from '../addRecipe/addRecipe/AddRecipe';\nimport { ErrorBoundary } from '../ErrorBoundary';\n\nconst myTheme = createMuiTheme({\n    palette: {\n        primary: {\n            contrastText: '#000000',\n            dark: '#c63f17',\n            light: '#ffa270',\n            main: '#ff7043',\n        },\n        secondary: {\n            contrastText: '#000000',\n            dark: '#8d8d8d',\n            light: '#efefef',\n            main: '#bdbdbd',\n        },\n    },\n});\n\nconst Root = () => (\n    <Router>\n        <ThemeProvider theme={myTheme}>\n            <ErrorBoundary>\n                <Container maxWidth='md'>\n                    <Route path='/' component={AddRecipe} />\n                </Container>\n            </ErrorBoundary>\n        </ThemeProvider>\n    </Router>\n);\n\nexport default Root;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport Root from './components/root/Root';\nimport './styles/styles.scss';\n\nrender(\n    <Root />,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}